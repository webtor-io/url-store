// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package url_store

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UrlStoreClient is the client API for UrlStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlStoreClient interface {
	// Pushes url to the store
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error)
	// Check url existence in the store
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckReply, error)
}

type urlStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlStoreClient(cc grpc.ClientConnInterface) UrlStoreClient {
	return &urlStoreClient{cc}
}

func (c *urlStoreClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error) {
	out := new(PushReply)
	err := c.cc.Invoke(ctx, "/webtor.url_sore.UrlStore/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlStoreClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, "/webtor.url_sore.UrlStore/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlStoreServer is the server API for UrlStore service.
// All implementations must embed UnimplementedUrlStoreServer
// for forward compatibility
type UrlStoreServer interface {
	// Pushes url to the store
	Push(context.Context, *PushRequest) (*PushReply, error)
	// Check url existence in the store
	Check(context.Context, *CheckRequest) (*CheckReply, error)
	mustEmbedUnimplementedUrlStoreServer()
}

// UnimplementedUrlStoreServer must be embedded to have forward compatible implementations.
type UnimplementedUrlStoreServer struct {
}

func (UnimplementedUrlStoreServer) Push(context.Context, *PushRequest) (*PushReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedUrlStoreServer) Check(context.Context, *CheckRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedUrlStoreServer) mustEmbedUnimplementedUrlStoreServer() {}

// UnsafeUrlStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlStoreServer will
// result in compilation errors.
type UnsafeUrlStoreServer interface {
	mustEmbedUnimplementedUrlStoreServer()
}

func RegisterUrlStoreServer(s grpc.ServiceRegistrar, srv UrlStoreServer) {
	s.RegisterService(&UrlStore_ServiceDesc, srv)
}

func _UrlStore_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlStoreServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webtor.url_sore.UrlStore/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlStoreServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlStore_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlStoreServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webtor.url_sore.UrlStore/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlStoreServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlStore_ServiceDesc is the grpc.ServiceDesc for UrlStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webtor.url_sore.UrlStore",
	HandlerType: (*UrlStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _UrlStore_Push_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _UrlStore_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "url-store.proto",
}
